<!-- The policy defined in this file provides an example of using OAuth2 for authorization between the gateway and a backend using Certificate from Key Vault -->
<!-- It shows how to obtain an access token from AAD, cache it for a configurable amount of time and forward it to the backend. -->


<!-- Send request to AAD to obtain a bearer token -->
<!-- Parameters: authorizationServer - format https://login.windows.net/TENANT-GUID/oauth2/token -->
<!-- Parameters: scope - a URI encoded scope value -->
<!-- Parameters: clientId - an id obtained during app registration -->
<!-- Parameters: KeyVaultName - Key Vault name where we need to get certificate -->
<!-- Parameters: CertName - Certificate name in Key Vault -->
<!-- Parameters: cachetime - Cache time in seconds for token -->
<!-- Copy the following snippet into the inbound section. -->

<policies>
  <inbound>
    <cache-lookup-value key="@("bearerToken")" variable-name="bearerToken" />
    <choose>
      <when condition="@(!context.Variables.ContainsKey("bearerToken"))">
        <set-variable name="authorizationServer" value="{{authorizationServer}}" />
        <set-variable name="clientId" value="{{clientId}}" />
        <!-- check the cache for secret first -->
        <cache-lookup-value key="mycert" variable-name="keyVaultCertBase64" />
        <!-- call Key Vault if secret is not found in the cache -->
        <choose>
          <when condition="@(!context.Variables.ContainsKey("keyVaultCertResponse"))">
            <send-request mode="new" response-variable-name="keyVaultCertResponse" timeout="20" ignore-error="false">
              <set-url>https://{{KeyVaultName}}.vault.azure.net/secrets/{{CertName}}/?api-version=2016-10-01</set-url>
              <set-method>GET</set-method>
              <authentication-managed-identity resource="https://vault.azure.net" />
            </send-request>
            <!-- transform response to string and store in cache -->
            <set-variable name="keyVaultCertBase64" value="@(((IResponse)context.Variables["keyVaultCertResponse"]).Body.As<JObject>
              ()["value"].ToString())" />
              <cache-store-value key="mycert" value="@((string)context.Variables["keyVaultCertBase64"])" duration="3600" />
            </when>
        </choose>
        <cache-lookup-value key="@("signedClientAssertion")" variable-name="signedClientAssertion" />
        <choose>
          <when condition="@(!context.Variables.ContainsKey("signedClientAssertion"))">
            <set-variable name="signedClientAssertion" value="@{
                        

                        //below code is to get claims
                        string aud = (string)context.Variables["authorizationServer"];//{{authorizationServer}};//authority + "/oauth2/token";
            string clientID = (string)context.Variables["clientId"];//{{clientId}};
            const uint JwtToAadLifetimeInSeconds = 60 * 20; // Ten minutes
            DateTime validFrom = DateTime.UtcNow;
            var nbf = ((DateTimeOffset)validFrom).ToUnixTimeSeconds().ToString();
            var exp = ((DateTimeOffset)(validFrom + TimeSpan.FromSeconds(JwtToAadLifetimeInSeconds))).ToUnixTimeSeconds().ToString();

            var claims =  new Dictionary<string, string>
              ()
              {
              { "aud", aud },
              { "exp", exp.ToString() },
              { "iss", clientID },
              { "jti", Guid.NewGuid().ToString() },
              { "nbf", nbf.ToString() },
              { "sub", clientID }
              };


              X509Certificate2 certificate = new X509Certificate2(Convert.FromBase64String((string)context.Variables["keyVaultCertBase64"]), (string)null);
              string signedClientAssertion = "";
              RSACng rsa = certificate.GetRSAPrivateKey() as RSACng;

              //Encoding variable
              char Base64PadCharacter = '=';
              char Base64Character62 = '+';
              char Base64Character63 = '/';
              char Base64UrlCharacter62 = '-';
              char Base64UrlCharacter63 = '_';

              string certEncode = Convert.ToBase64String(certificate.GetCertHash()).Split(Base64PadCharacter)[0].Replace(Base64Character62, Base64UrlCharacter62).Replace(Base64Character63, Base64UrlCharacter63);

              //alg represents the desired signing algorithm, which is SHA-256 in this case
              //kid represents the certificate thumbprint
              var header = new Dictionary<string, string>
                ()
                {
                { "alg", "RS256"},
                { "kid", certEncode }
                };

                string headerEncode = Convert.ToBase64String(Encoding.UTF8.GetBytes(JObject.FromObject(header).ToString())).Split(Base64PadCharacter)[0].Replace(Base64Character62, Base64UrlCharacter62).Replace(Base64Character63, Base64UrlCharacter63);
                string claimsEncode = Convert.ToBase64String(Encoding.UTF8.GetBytes(JObject.FromObject(claims).ToString())).Split(Base64PadCharacter)[0].Replace(Base64Character62, Base64UrlCharacter62).Replace(Base64Character63, Base64UrlCharacter63);
                string token = headerEncode + "." + claimsEncode;
                string signature = Convert.ToBase64String(rsa.SignData(Encoding.UTF8.GetBytes(token), HashAlgorithmName.SHA256, System.Security.Cryptography.RSASignaturePadding.Pkcs1)).Split(Base64PadCharacter)[0].Replace(Base64Character62, Base64UrlCharacter62).Replace(Base64Character63, Base64UrlCharacter63);
                signedClientAssertion = string.Concat(token, ".", signature);
                return signedClientAssertion;
                }" />
                <cache-store-value key="signedClientAssertion" value="@((string)context.Variables["signedClientAssertion"])" duration="{{cachetime}]" />
              </when>
          <otherwise />
        </choose>
        <send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
          <set-url>@((string)context.Variables["authorizationServer"])</set-url>
          <set-method>POST</set-method>
          <set-header name="Content-Type" exists-action="override">
            <value>application/x-www-form-urlencoded</value>
          </set-header>
          <set-body>
            @{
            return "client_id={{clientId}}&resource={{scope}}&client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer&client_assertion=" + ((string)context.Variables["signedClientAssertion"]) + "&grant_type=client_credentials";

            // For identity providers other than Azure AD, try return statement below
            // return "client_id={{clientId}}&scope={{scope}}&client_secret={{clientSecret}}&grant_type=client_credentials";
            }
          </set-body>
        </send-request>
        <set-variable name="bearerToken" value="@((String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>
          ()["access_token"])" />
          <cache-store-value key="bearerToken" value="@((string)context.Variables["bearerToken"])" duration="{{cachetime}}" />
        </when>
    </choose>
    <set-header name="Authorization" exists-action="override">
      <value>@("Bearer " + (string)context.Variables["bearerToken"])</value>
    </set-header>
    <!--  Don't expose APIM subscription key to the backend. -->
    <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
  </inbound>
  <backend>
    <forward-request />
  </backend>
  <outbound />
  <on-error />
</policies>
