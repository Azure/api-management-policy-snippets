<!--
    This policy sample demonstrates a pattern of replaying a request. 
    For eg: one scenario could be when we are using quota and rate limit policies and for some special tier consumers, 
    we would like to serve the request even if there was a quota error but with a different backend.
    In such cases, we can replay the request to a different backend with the same request headers and body.    
    The "example-policy-name" string in the when condition is just for example and needs to be replaced with the actual policy name accordingly.

    Important Note: 
    Although this pattern works, an important point to note here is since we are now replaying the request 
    we would end up having 2 log entries for the same request in the APIM logs.
-->
<policies>
    <inbound>
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
        <choose>
            <when condition="@(context.LastError.Source == "example-policy-name")">
                <set-variable name="replay-url" value="@("http://" + context.Request.Headers.GetValueOrDefault("X-Original-Host") + context.Request.Headers.GetValueOrDefault("X-Original-Url"))" />
                <set-variable name="original-error-source" value="@(context.LastError.Source)" />
                <set-variable name="original-error-reason" value="@(context.LastError.Reason)" />
                
                <!-- Following snipped demonstrates the replya pattern,
                For this, we are using send request's "copy" mode which would copy the original request's headers and body accoridngly.
                Policy Documentation link https://learn.microsoft.com/en-us/azure/api-management/send-request-policy#attributes
                -->
                <!-- Note: 
                As per the policy documentation,  the send request method will copy the request headers and body accordingly 
                but we should always validate this and we can expclitly set the the request body and headers as needed.
                -->
                <send-request mode="copy" response-variable-name="replay-response" timeout="60" ignore-error="false">
                    <set-url>@(context.Variables.GetValueOrDefault<string>("replay-url"))</set-url>
                    <!-- While replaying the request this time, we might need to pass some additional information
                    this time in our request with corresponding logic in the inbound section to process such requests  
                    The string "skip-example-policy-error" here is just an example of additional header we are sending here 
                    -->
                    <set-header name="skip-example-policy-error" exists-action="override">
                        <value>true</value>
                    </set-header>
                </send-request>
                <!-- THIS IS AN IMPORTANT STEP i.e. the response captured in the send-request policy attribute 
                "response-variable-name" defined above has to be explicity sent back 
                -->
                <return-response response-variable-name="replay-response">
                    <!-- Any additional headers like below can further be added as part of response tracking -->
                    <set-header name="x-request-replayed" exists-action="override">
                        <value>true</value>
                    </set-header>
                    <set-header name="x-original-error-source" exists-action="override">
                        <value>@(context.Variables.GetValueOrDefault<string>("original-error-source"))</value>
                    </set-header>
                    <set-header name="x-original-error-reason" exists-action="override">
                        <value>@(context.Variables.GetValueOrDefault<string>("original-error-reason"))</value>
                    </set-header>
                </return-response>
            </when>
            <otherwise>
                <!-- Any additional headers like below can further be added as part of response tracking -->
                <set-header name="x-request-replayed" exists-action="override">
                    <value>"false"</value>
                </set-header>
            </otherwise>
	    </choose>
    </on-error>
</policies>