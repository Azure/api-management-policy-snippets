<!--
    This policy sample demonstrates a pattern of replaying the request. 
    For eg: One scenario could be when we are using quota and rate limit policies,for some special tier consumers, 
    we would still like to serve the request if there was a quota error but this time with a low-end backend.
    
    The "example-policy-name" string is in the when condition is just for example and needs to be replaced with the actual policy name accordingly.

    Important Note: 
    Although this pattern works, we would do end up having 2 log entries now for the same request, since the request is now being replayed.
-->
<policies>
    <inbound>
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
        <choose>
            <when condition="@(context.LastError.Source == "example-policy-name")">
                <set-variable name="replay-url" value="@("http://" + context.Request.Headers.GetValueOrDefault("X-Original-Host") + context.Request.Headers.GetValueOrDefault("X-Original-Url"))" />
                <set-variable name="original-error-source" value="@(context.LastError.Source)" />
                <set-variable name="original-error-reason" value="@(context.LastError.Reason)" />
                <!-- We replay the same request again to APIM -->
                <send-request mode="copy" response-variable-name="replay-response" timeout="60" ignore-error="false">
                    <set-url>@(context.Variables.GetValueOrDefault<string>("replay-url"))</set-url>
                    <set-method>POST</set-method>
                    <!-- While replaying the request this time, we might need to pass some additional information
                    this time in our request with corresponding logic in the inbound section to process such requests  
                    The string "skip-example-policy-error" here is just as an example -->
                    <set-header name="skip-example-policy-error" exists-action="override">
                        <value>true</value>
                    </set-header>
                </send-request>
                <!-- THIS IS AN IMPORTANT STEP i.e. the response captured in policy variable "response-variable-name" defined above has to be explicity sent back -->
                <return-response response-variable-name="replay-response">
                    <!-- Any additional headers like below can further be added as part of response tracking -->
                    <set-header name="x-request-replayed" exists-action="override">
                        <value>true</value>
                    </set-header>
                    <set-header name="x-original-error-source" exists-action="override">
                        <value>@(context.Variables.GetValueOrDefault<string>("original-error-source"))</value>
                    </set-header>
                    <set-header name="x-original-error-reason" exists-action="override">
                        <value>@(context.Variables.GetValueOrDefault<string>("original-error-reason"))</value>
                    </set-header>
                </return-response>
            </when>
            <otherwise>
                <!-- Any additional headers like below can further be added as part of response tracking -->
                <set-header name="x-request-replayed" exists-action="override">
                    <value>"false"</value>
                </set-header>
            </otherwise>
	    </choose>
    </on-error>
</policies>