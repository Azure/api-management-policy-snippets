<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - Only the <forward-request> policy element can appear within the <backend> section element.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
-->
<policies>
    <inbound>
        <base />
        <choose>
            <when condition="@(context.Request.Body.As<JObject>(preserveContent: true)["data"] == null)">
                <return-response>
                    <set-status code="400" />
                </return-response>
            </when>
            <otherwise>
                <choose>
                    <when condition="@(context.Request.Body.As<JObject>(preserveContent: true)["metadataVersion"].ToString() != "1")">
                        <return-response>
                            <set-status code="501" />
                        </return-response>
                    </when>
                    <otherwise>
                        <set-header name="X-Event-Id" exists-action="override">
                            <value>@(context.Request.Body.As<JObject>(preserveContent: true)["id"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Subject" exists-action="override">
                            <value>@(context.Request.Body.As<JObject>(preserveContent: true)["subject"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Type" exists-action="override">
                            <value>@(context.Request.Body.As<JObject>(preserveContent: true)["eventType"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Time" exists-action="override">
                            <value>@(context.Request.Body.As<JObject>(preserveContent: true)["eventTime"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Data-Version" exists-action="override">
                            <value>@(context.Request.Body.As<JObject>(preserveContent: true)["dataVersion"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Metadata-Version" exists-action="override">
                            <value>@(context.Request.Body.As<JObject>(preserveContent: true)["metadataVersion"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Topic" exists-action="override">
                            <value>@(context.Request.Body.As<JObject>(preserveContent: true)["topic"].ToString())</value>
                        </set-header>
                        <set-body>@(context.Request.Body.As<JObject>(preserveContent: true)["data"].ToString())</set-body>                        
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <return-response>
            <set-status code="202" />
        </return-response>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>