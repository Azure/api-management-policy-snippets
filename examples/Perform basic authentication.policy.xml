<!-- The policy defined in this file demonstrates how to perform basic authentication in the inbound request. -->

<!-- This can be useful when working with clients with limited authentication options. -->

<!-- The Authorization header is deleted after validation to prevent issues with backend APIs. -->

<!-- The 'Basic' HTTP Authentication Scheme is described in IETF RFC 7617 https://tools.ietf.org/html/rfc7617 -->

<!-- Copy the following snippet into the inbound section. -->

<policies>
    <inbound>
        <base />
        <check-header name="Authorization" failed-check-httpcode="401" failed-check-error-message="Not authorized" ignore-case="false">
		</check-header>
        <choose>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Authorization").AsBasic()==null 
            || context.Request.Headers.GetValueOrDefault("Authorization").AsBasic().Password==null 
            || context.Request.Headers.GetValueOrDefault("Authorization").AsBasic().UserId==null 
            || context.Request.Headers.GetValueOrDefault("Authorization").AsBasic().UserId!="{{UserId}}" 
            || context.Request.Headers.GetValueOrDefault("Authorization").AsBasic().Password!="{{Password}}")">
                <return-response>
                    <set-status code="401" reason="Not authorized" />
                </return-response>
            </when>
        </choose>
        <set-header name="Authorization" exists-action="delete" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
