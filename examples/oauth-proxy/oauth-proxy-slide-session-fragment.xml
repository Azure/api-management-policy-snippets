<fragment>

	<!-- slide the cookie -->
	<choose>
		<when condition="@(context.Variables.ContainsKey("cacheKey"))">
			<set-variable name="cookie-expiry" value="@(DateTimeOffset.UtcNow.AddSeconds({{SessionCookieExpirationInSeconds}}).ToUnixTimeMilliseconds())" />
			<set-variable name="cookie-prefix" value="@($"{(string)context.Variables["cacheKey"]}.{(string)context.Variables["ivTokens"]}.{(long)context.Variables["cookie-expiry"]}")" />

			<!-- encrypt this using the cookie-iv-->
			<set-variable name="encryptedCookie" value="@{
				var cookie = Encoding.UTF8.GetBytes((string)context.Variables["cookie-prefix"]);
				var ivString = (string)context.Variables["ivCookie"];
				var iv = Guid.Parse(ivString).ToByteArray();
				var key1 = Convert.FromBase64String("{{CookieEncryptionKey1}}");
				var key2 = Convert.FromBase64String("{{CookieEncryptionKey2}}");
				var key = {{CookieEncryptionKey}};
				var encryptionKey = key == 1 ? key1 : key2;
				var encryptedCookie = cookie.Encrypt("Aes", encryptionKey, iv);
				return $"{Convert.ToBase64String(encryptedCookie)}.{ivString}.{key}";
			}" />

			<!-- if there's an existing cookie then we just want to blat any cookies with {{CookiePrefix}} -->
			<!-- we don't want to override the whole header, but we also don't want to allow the downstream to provide a cookie called {{CookiePrefix}}  -->
			<set-header name="Set-Cookie" exists-action="override">
				<value>
                @{
					var outboundCookies = context.Response.Headers.ContainsKey("Set-Cookie") 
						? context.Response.Headers
							.GetValueOrDefault("Set-Cookie", "")
							.Split(';')
							.Select(x => x.Trim())
							.Where(x => x != string.Empty)
							.Select(cookie => cookie.Split('='))
							.Where(cookie => cookie[0] != "{{CookiePrefix}}")
							.Aggregate("", (x, y) => $"{x}{y[0]} = {y[1]}; ")
						: "";
					return outboundCookies + $"{{CookiePrefix}}={(string)context.Variables["encryptedCookie"]}; SameSite=Lax; secure; path=/; expires={DateTimeOffset.FromUnixTimeMilliseconds((long)context.Variables["cookie-expiry"]).ToString("R")}; Secure; HttpOnly";
				}
                </value>
			</set-header>
		</when>
	</choose>
</fragment>
