<!--
    This policy sample is a request that Azure API Management service produces into a blob storage account to GET a file with his metada.

    This intends to authenticate with managed-identity account between Azure API Management service and the storage account.
    If you want, you can specify another account to get the token:
    
        <authentication-managed-identity resource="https://storage.azure.com/" client-id="{application-id}" output-token-variable-name="msi-access-token" ignore-error="false" />
    
    Usage:         
        StorageAccount.Name => as named value on you Azure API Management service instance with the values of the storage account name;
        blobContainer => as part of the HTTP request path with name of the storage container to save/get the file;
        fileNameWithExtension => as part of the HTTP request path with name and extension of the file you want to save/get;
        Gateway.Name => as named value on you Azure API Management service with the custom domain of the gateway;

    Maintainer: gfchaves
-->
<policies>
    <inbound>
        <base />
        <!-- First get the auth token with managed-identity from the storage account and save it on a output token -->
        <authentication-managed-identity resource="https://storage.azure.com/" output-token-variable-name="msi-access-token" ignore-error="false" />
        
        <!-- Send the GET request with metadata -->
        <send-request mode="new" response-variable-name="result" timeout="300" ignore-error="false">
            <!-- Get variables to configure your: storageaccount, destination container and file name with extension -->            
            <set-url>@{ return "https://{{StorageAccount.Name}}.blob.core.windows.net/" + (string)context.Request.MatchedParameters("blobContainer") + "/" + (string)context.Request.MatchedParameters("fileNameWithExtension",""); }</set-url>            
            <set-method>GET</set-method>
            <set-header name="Host" exists-action="override">
                <value>{{StorageAccount.Name}}.blob.core.windows.net</value>
            </set-header>
            <set-header name="User-Agent" exists-action="override">
                <value>{{Gateway.Name}}</value>
            </set-header>
            <set-header name="X-Ms-Blob-Type" exists-action="override">
                <value>BlockBlob</value>
            </set-header>           
            <set-header name="X-Ms-Client-Request-Id" exists-action="override">
                <value>@{ return Guid.NewGuid().ToString(); }</value>
            </set-header>
            <set-header name="X-Ms-Version" exists-action="override">
                <value>2019-12-12</value>
            </set-header>
            <set-header name="Accept" exists-action="override">
                <value>*/*</value>
            </set-header>            
            <!-- Set the header with authorization bearer token that was previously requested -->
            <set-header name="Authorization" exists-action="override">
                <value>@("Bearer " + (string)context.Variables["msi-access-token"])</value>
            </set-header>
        </send-request>
        <!-- Returns directly the response from the storage account. No need to specify headers, but to show how we can override and get the specific data from http blobstorage result-->
        <return-response response-variable-name="result">
            <set-status code="200" />                       
            <set-header name="{MyMetadataName1}" exists-action="override">
                <value>@(((IResponse)context.Variables["result"]).Headers.GetValueOrDefault("x-ms-meta-{MyMetadataName1}",""))</value>
            </set-header>
            <set-header name="{MyMetadataName2}" exists-action="override">
                <value>@(((IResponse)context.Variables["result"]).Headers.GetValueOrDefault("x-ms-meta-{MyMetadataName2}",""))</value>
            </set-header>
        </return-response>
    </inbound>
    <on-error>
        <base />
    </on-error>    
    <outbound>
        <base />
    </outbound>
</policies>