<policies>
    <inbound>
        <base />
        <!-- Cache lookup with default state to allow requests -->
        <cache-lookup-value key="circuitBreakerState" variable-name="circuitBreakerState" default-value="true" />
        <!-- Setting a default timeout -->
        <set-variable name="circuitBreakerTimeoutSeconds" value="30" />
        <choose>
            <!-- Customize this for priority handling -->
            <when condition="@(bool.Parse((string)context.Variables["circuitBreakerState"]) == false)">
                <!-- Return a response immediately if the circuit breaker is tripped -->
                <return-response>
                    <set-status code="503" reason="Service Unavailable. Circuit tripped!" />
                    <set-header name="Retry-After" exists-action="override">
                        <value>@((string)context.Variables["circuitBreakerTimeoutSeconds"])</value>
                    </set-header>
                </return-response>
            </when>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <!-- Reset the circuit breaker on a successful response -->
        <cache-store-value key="circuitBreakerState" value="true" duration="300" />
    </outbound>
    <on-error>
        <base />
        <!-- Check for errors -->
        <!-- Customize this for specific errors/priority handling -->
        <choose>
            <when condition="@(context.Response.StatusCode >= 300)">
                <!-- Trip the circuit breaker on an error -->
                <cache-store-value key="circuitBreakerState" value="false" duration="@(int.Parse((string)context.Variables["circuitBreakerTimeoutSeconds"]))" />
                <!-- Continue with default error handling -->
            </when>
        </choose>
    </on-error>
</policies>