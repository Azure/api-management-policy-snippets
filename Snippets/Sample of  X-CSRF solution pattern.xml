<!-- This snippet shows how to solve the X-SCRF pattern used by alot of api's among them our sample of the SAP Gateway  -->
<!-- 
	X-CSRF pattern: (based on the implentation in SAP Gateway)
	First a (succesfull) get is required to get a  to be done to the API to obtain a token and cookie.
	This a step in making sure that noone has picked up a token from another request.
	Then the real post can be done.
	
	read more at: http://blog.ibiz-solutions.se/uncategorized/exposing-sap-gateway-services-with-api-management/				
		-->

<!-- Copy the following snippet into the inbound section -->

<!-- set the URL to the service -->
	<rewrite-uri template="sap/opu/odata/sap/ZCAV_AZURE_CS_ORDER_SRV/ItHeaderSet('{oid}')" />
	
	<!-- Creating a subrequest "fetchtokenresponse" to as Get request to get the token and cookie-->
	<send-request mode="new" response-variable-name="fetchtokenresponse" timeout="10" ignore-error="false">
		<!-- we use the samee URL and authentication, just changing method to GET -->
		<set-url>@(context.Request.Url.ToString())</set-url>
		<set-method>GET</set-method>
		<set-header name="X-CSRF-Token" exists-action="override">
			<value>Fetch</value>
		</set-header>
		<set-header name="Authorization" exists-action="override">
			<value>Basic aaaaaaaaaaaaaaaaaaaaaaaaaa ==</value>
		</set-header>
		<set-body>
		</set-body>
	</send-request>
	
	<!-- extracting the token from the "fetchtokenresponse" and set as header in the POST request -->
	<set-header name="X-CSRF-Token" exists-action="skip">
		<value>@(((IResponse)context.Variables["fetchtokenresponse"]).Headers.GetValueOrDefault("x-csrf-token"))</value>
	</set-header>
	
	<!-- extracting the Cookie from the "fetchtokenresponse" and set as header in the POST request -->
	<set-header name="Cookie" exists-action="skip">
		<value>@{
	 string rawcookie = ((IResponse)context.Variables["fetchtokenresponse"]).Headers.GetValueOrDefault("Set-Cookie");
	 string[] cookies = rawcookie.Split(';');
	 string xsrftoken = cookies.FirstOrDefault( ss => ss.Contains("sap-XSRF"));
	 return xsrftoken.Split(',')[1];
	 }
		</value>
	</set-header>